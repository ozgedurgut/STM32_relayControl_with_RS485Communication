
STM32_relayControl_RS485Comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b1c  08002b1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b1c  08002b1c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b1c  08002b1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08002b94  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002b94  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d17  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000156a  00000000  00000000  00025db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00027320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  000279c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e76  00000000  00000000  00027fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074b2  00000000  00000000  0003ee4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082454  00000000  00000000  00046300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8754  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d88  00000000  00000000  000c87a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aa4 	.word	0x08002aa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002aa4 	.word	0x08002aa4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <sendData>:
/* USER CODE BEGIN 0 */
char TxData[6];
uint8_t RxData[6];

void sendData (uint8_t *data)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016a:	480c      	ldr	r0, [pc, #48]	; (800019c <sendData+0x40>)
 800016c:	f000 fe67 	bl	8000e3e <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,data, strlen(data),1000);
 8000170:	6878      	ldr	r0, [r7, #4]
 8000172:	f7ff ffeb 	bl	800014c <strlen>
 8000176:	4603      	mov	r3, r0
 8000178:	b29a      	uxth	r2, r3
 800017a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800017e:	6879      	ldr	r1, [r7, #4]
 8000180:	4807      	ldr	r0, [pc, #28]	; (80001a0 <sendData+0x44>)
 8000182:	f001 fadc 	bl	800173e <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET); //
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018c:	4803      	ldr	r0, [pc, #12]	; (800019c <sendData+0x40>)
 800018e:	f000 fe56 	bl	8000e3e <HAL_GPIO_WritePin>
}
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010800 	.word	0x40010800
 80001a0:	2000008c 	.word	0x2000008c

080001a4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	460b      	mov	r3, r1
 80001ae:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 16);
 80001b0:	2210      	movs	r2, #16
 80001b2:	4904      	ldr	r1, [pc, #16]	; (80001c4 <HAL_UARTEx_RxEventCallback+0x20>)
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <HAL_UARTEx_RxEventCallback+0x24>)
 80001b6:	f001 fb54 	bl	8001862 <HAL_UARTEx_ReceiveToIdle_IT>
	// The function ReceiveToIdle_IT will receive the incoming data and store in the temperature buffer, until the Idle line is detected.
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	200000d8 	.word	0x200000d8
 80001c8:	2000008c 	.word	0x2000008c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fa55 	bl	8000680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f84f 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8b3 	bl	8000344 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001de:	f000 f887 	bl	80002f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 16);
 80001e2:	2210      	movs	r2, #16
 80001e4:	491e      	ldr	r1, [pc, #120]	; (8000260 <main+0x94>)
 80001e6:	481f      	ldr	r0, [pc, #124]	; (8000264 <main+0x98>)
 80001e8:	f001 fb3b 	bl	8001862 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	if(HAL_GPIO_ReadPin(GPIOB,PB9_Pin)==GPIO_PIN_RESET) {
 80001ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f0:	481d      	ldr	r0, [pc, #116]	; (8000268 <main+0x9c>)
 80001f2:	f000 fe0d 	bl	8000e10 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d114      	bne.n	8000226 <main+0x5a>
	  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin,GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	481a      	ldr	r0, [pc, #104]	; (800026c <main+0xa0>)
 8000204:	f000 fe1b 	bl	8000e3e <HAL_GPIO_WritePin>
	  int num = 0;
 8000208:	2300      	movs	r3, #0
 800020a:	603b      	str	r3, [r7, #0]
	  sprintf(TxData,"%d",num);
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	4918      	ldr	r1, [pc, #96]	; (8000270 <main+0xa4>)
 8000210:	4818      	ldr	r0, [pc, #96]	; (8000274 <main+0xa8>)
 8000212:	f001 ffcd 	bl	80021b0 <siprintf>
	  sendData(TxData);
 8000216:	4817      	ldr	r0, [pc, #92]	; (8000274 <main+0xa8>)
 8000218:	f7ff ffa0 	bl	800015c <sendData>
	  HAL_Delay(500);
 800021c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000220:	f000 fa90 	bl	8000744 <HAL_Delay>
 8000224:	e7e2      	b.n	80001ec <main+0x20>
	}
	else if(HAL_GPIO_ReadPin(GPIOB,PB9_Pin)==GPIO_PIN_SET) {
 8000226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800022a:	480f      	ldr	r0, [pc, #60]	; (8000268 <main+0x9c>)
 800022c:	f000 fdf0 	bl	8000e10 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b01      	cmp	r3, #1
 8000234:	d1da      	bne.n	80001ec <main+0x20>
	  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin,GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023c:	480b      	ldr	r0, [pc, #44]	; (800026c <main+0xa0>)
 800023e:	f000 fdfe 	bl	8000e3e <HAL_GPIO_WritePin>
	  int num=1;
 8000242:	2301      	movs	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
	  sprintf(TxData,"%d",num);
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	4909      	ldr	r1, [pc, #36]	; (8000270 <main+0xa4>)
 800024a:	480a      	ldr	r0, [pc, #40]	; (8000274 <main+0xa8>)
 800024c:	f001 ffb0 	bl	80021b0 <siprintf>
	  sendData(TxData);
 8000250:	4808      	ldr	r0, [pc, #32]	; (8000274 <main+0xa8>)
 8000252:	f7ff ff83 	bl	800015c <sendData>
	  HAL_Delay(500);
 8000256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025a:	f000 fa73 	bl	8000744 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOB,PB9_Pin)==GPIO_PIN_RESET) {
 800025e:	e7c5      	b.n	80001ec <main+0x20>
 8000260:	200000d8 	.word	0x200000d8
 8000264:	2000008c 	.word	0x2000008c
 8000268:	40010c00 	.word	0x40010c00
 800026c:	40011000 	.word	0x40011000
 8000270:	08002abc 	.word	0x08002abc
 8000274:	200000d0 	.word	0x200000d0

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	; 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 ff8a 	bl	80021a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2310      	movs	r3, #16
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a6:	2300      	movs	r3, #0
 80002a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fdde 	bl	8000e70 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ba:	f000 f8c1 	bl	8000440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 f84b 	bl	8001374 <HAL_RCC_ClockConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002e4:	f000 f8ac 	bl	8000440 <Error_Handler>
  }
}
 80002e8:	bf00      	nop
 80002ea:	3740      	adds	r7, #64	; 0x40
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART1_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_USART1_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART1_UART_Init+0x4c>)
 80002fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000328:	f001 f9bc 	bl	80016a4 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f885 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000008c 	.word	0x2000008c
 8000340:	40013800 	.word	0x40013800

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b35      	ldr	r3, [pc, #212]	; (8000430 <MX_GPIO_Init+0xec>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a34      	ldr	r2, [pc, #208]	; (8000430 <MX_GPIO_Init+0xec>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b32      	ldr	r3, [pc, #200]	; (8000430 <MX_GPIO_Init+0xec>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b2f      	ldr	r3, [pc, #188]	; (8000430 <MX_GPIO_Init+0xec>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a2e      	ldr	r2, [pc, #184]	; (8000430 <MX_GPIO_Init+0xec>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <MX_GPIO_Init+0xec>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b29      	ldr	r3, [pc, #164]	; (8000430 <MX_GPIO_Init+0xec>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a28      	ldr	r2, [pc, #160]	; (8000430 <MX_GPIO_Init+0xec>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <MX_GPIO_Init+0xec>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b23      	ldr	r3, [pc, #140]	; (8000430 <MX_GPIO_Init+0xec>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a22      	ldr	r2, [pc, #136]	; (8000430 <MX_GPIO_Init+0xec>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b20      	ldr	r3, [pc, #128]	; (8000430 <MX_GPIO_Init+0xec>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	481d      	ldr	r0, [pc, #116]	; (8000434 <MX_GPIO_Init+0xf0>)
 80003c0:	f000 fd3d 	bl	8000e3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ca:	481b      	ldr	r0, [pc, #108]	; (8000438 <MX_GPIO_Init+0xf4>)
 80003cc:	f000 fd37 	bl	8000e3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80003d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	2301      	movs	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80003de:	2301      	movs	r3, #1
 80003e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	4619      	mov	r1, r3
 80003e8:	4812      	ldr	r0, [pc, #72]	; (8000434 <MX_GPIO_Init+0xf0>)
 80003ea:	f000 fb8d 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : RE_DE_Pin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 80003ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2302      	movs	r3, #2
 80003fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	480c      	ldr	r0, [pc, #48]	; (8000438 <MX_GPIO_Init+0xf4>)
 8000408:	f000 fb7e 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9_Pin */
  GPIO_InitStruct.Pin = PB9_Pin;
 800040c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000416:	2301      	movs	r3, #1
 8000418:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB9_GPIO_Port, &GPIO_InitStruct);
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4619      	mov	r1, r3
 8000420:	4806      	ldr	r0, [pc, #24]	; (800043c <MX_GPIO_Init+0xf8>)
 8000422:	f000 fb71 	bl	8000b08 <HAL_GPIO_Init>

}
 8000426:	bf00      	nop
 8000428:	3720      	adds	r7, #32
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000
 8000434:	40011000 	.word	0x40011000
 8000438:	40010800 	.word	0x40010800
 800043c:	40010c00 	.word	0x40010c00

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000448:	e7fe      	b.n	8000448 <Error_Handler+0x8>
	...

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <HAL_MspInit+0x5c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_MspInit+0x5c>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <HAL_MspInit+0x5c>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <HAL_MspInit+0x5c>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <HAL_MspInit+0x60>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <HAL_MspInit+0x60>)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010000 	.word	0x40010000

080004b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a20      	ldr	r2, [pc, #128]	; (800054c <HAL_UART_MspInit+0x9c>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d139      	bne.n	8000544 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <HAL_UART_MspInit+0xa0>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a1e      	ldr	r2, [pc, #120]	; (8000550 <HAL_UART_MspInit+0xa0>)
 80004d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <HAL_UART_MspInit+0xa0>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <HAL_UART_MspInit+0xa0>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a18      	ldr	r2, [pc, #96]	; (8000550 <HAL_UART_MspInit+0xa0>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <HAL_UART_MspInit+0xa0>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050a:	2303      	movs	r3, #3
 800050c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	480f      	ldr	r0, [pc, #60]	; (8000554 <HAL_UART_MspInit+0xa4>)
 8000516:	f000 faf7 	bl	8000b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800051a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	4809      	ldr	r0, [pc, #36]	; (8000554 <HAL_UART_MspInit+0xa4>)
 8000530:	f000 faea 	bl	8000b08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	2025      	movs	r0, #37	; 0x25
 800053a:	f000 f9fe 	bl	800093a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800053e:	2025      	movs	r0, #37	; 0x25
 8000540:	f000 fa17 	bl	8000972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40013800 	.word	0x40013800
 8000550:	40021000 	.word	0x40021000
 8000554:	40010800 	.word	0x40010800

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler+0x4>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler+0x4>

08000576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059e:	f000 f8b5 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <USART1_IRQHandler+0x10>)
 80005ae:	f001 f9a7 	bl	8001900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000008c 	.word	0x2000008c

080005bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <_sbrk+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <_sbrk+0x60>)
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <_sbrk+0x64>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <_sbrk+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d207      	bcs.n	80005fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ec:	f001 fdae 	bl	800214c <__errno>
 80005f0:	4603      	mov	r3, r0
 80005f2:	220c      	movs	r2, #12
 80005f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	e009      	b.n	8000610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <_sbrk+0x64>)
 800060c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20005000 	.word	0x20005000
 800061c:	00000400 	.word	0x00000400
 8000620:	200000e0 	.word	0x200000e0
 8000624:	200000f8 	.word	0x200000f8

08000628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000636:	490d      	ldr	r1, [pc, #52]	; (800066c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800064c:	4c0a      	ldr	r4, [pc, #40]	; (8000678 <LoopFillZerobss+0x22>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800065a:	f7ff ffe5 	bl	8000628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065e:	f001 fd7b 	bl	8002158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fdb3 	bl	80001cc <main>
  bx lr
 8000666:	4770      	bx	lr
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000670:	08002b24 	.word	0x08002b24
  ldr r2, =_sbss
 8000674:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000678:	200000f8 	.word	0x200000f8

0800067c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_2_IRQHandler>
	...

08000680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_Init+0x28>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_Init+0x28>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000690:	2003      	movs	r0, #3
 8000692:	f000 f947 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000696:	200f      	movs	r0, #15
 8000698:	f000 f808 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800069c:	f7ff fed6 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40022000 	.word	0x40022000

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x54>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_InitTick+0x58>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f95f 	bl	800098e <HAL_SYSTICK_Config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00e      	b.n	80006f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d80a      	bhi.n	80006f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295
 80006e8:	f000 f927 	bl	800093a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <HAL_InitTick+0x5c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000000 	.word	0x20000000
 8000704:	20000008 	.word	0x20000008
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x1c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x20>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a03      	ldr	r2, [pc, #12]	; (800072c <HAL_IncTick+0x20>)
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	20000008 	.word	0x20000008
 800072c:	200000e4 	.word	0x200000e4

08000730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <HAL_GetTick+0x10>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	200000e4 	.word	0x200000e4

08000744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800074c:	f7ff fff0 	bl	8000730 <HAL_GetTick>
 8000750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800075c:	d005      	beq.n	800076a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_Delay+0x44>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4413      	add	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800076a:	bf00      	nop
 800076c:	f7ff ffe0 	bl	8000730 <HAL_GetTick>
 8000770:	4602      	mov	r2, r0
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	429a      	cmp	r2, r3
 800077a:	d8f7      	bhi.n	800076c <HAL_Delay+0x28>
  {
  }
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008

0800078c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db0b      	blt.n	800081a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f003 021f 	and.w	r2, r3, #31
 8000808:	4906      	ldr	r1, [pc, #24]	; (8000824 <__NVIC_EnableIRQ+0x34>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	095b      	lsrs	r3, r3, #5
 8000810:	2001      	movs	r0, #1
 8000812:	fa00 f202 	lsl.w	r2, r0, r2
 8000816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db0a      	blt.n	8000852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <__NVIC_SetPriority+0x4c>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	0112      	lsls	r2, r2, #4
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	440b      	add	r3, r1
 800084c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000850:	e00a      	b.n	8000868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <__NVIC_SetPriority+0x50>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	3b04      	subs	r3, #4
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	440b      	add	r3, r1
 8000866:	761a      	strb	r2, [r3, #24]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000e100 	.word	0xe000e100
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f1c3 0307 	rsb	r3, r3, #7
 8000896:	2b04      	cmp	r3, #4
 8000898:	bf28      	it	cs
 800089a:	2304      	movcs	r3, #4
 800089c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3304      	adds	r3, #4
 80008a2:	2b06      	cmp	r3, #6
 80008a4:	d902      	bls.n	80008ac <NVIC_EncodePriority+0x30>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3b03      	subs	r3, #3
 80008aa:	e000      	b.n	80008ae <NVIC_EncodePriority+0x32>
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 32ff 	mov.w	r2, #4294967295
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43da      	mvns	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	401a      	ands	r2, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43d9      	mvns	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	4313      	orrs	r3, r2
         );
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f0:	d301      	bcc.n	80008f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00f      	b.n	8000916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <SysTick_Config+0x40>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fe:	210f      	movs	r1, #15
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f7ff ff90 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <SysTick_Config+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <SysTick_Config+0x40>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	e000e010 	.word	0xe000e010

08000924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff2d 	bl	800078c <__NVIC_SetPriorityGrouping>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff42 	bl	80007d4 <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ff90 	bl	800087c <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff5f 	bl	8000828 <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff35 	bl	80007f0 <__NVIC_EnableIRQ>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffa2 	bl	80008e0 <SysTick_Config>
 800099c:	4603      	mov	r3, r0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b085      	sub	sp, #20
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d008      	beq.n	80009ce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2204      	movs	r2, #4
 80009c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e020      	b.n	8000a10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f022 020e 	bic.w	r2, r2, #14
 80009dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f022 0201 	bic.w	r2, r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f202 	lsl.w	r2, r1, r2
 80009fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
	...

08000a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d005      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2204      	movs	r2, #4
 8000a36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	e051      	b.n	8000ae2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 020e 	bic.w	r2, r2, #14
 8000a4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 0201 	bic.w	r2, r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a22      	ldr	r2, [pc, #136]	; (8000aec <HAL_DMA_Abort_IT+0xd0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d029      	beq.n	8000abc <HAL_DMA_Abort_IT+0xa0>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <HAL_DMA_Abort_IT+0xd4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d022      	beq.n	8000ab8 <HAL_DMA_Abort_IT+0x9c>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <HAL_DMA_Abort_IT+0xd8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d01a      	beq.n	8000ab2 <HAL_DMA_Abort_IT+0x96>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <HAL_DMA_Abort_IT+0xdc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d012      	beq.n	8000aac <HAL_DMA_Abort_IT+0x90>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <HAL_DMA_Abort_IT+0xe0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d00a      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x8a>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a1a      	ldr	r2, [pc, #104]	; (8000b00 <HAL_DMA_Abort_IT+0xe4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d102      	bne.n	8000aa0 <HAL_DMA_Abort_IT+0x84>
 8000a9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a9e:	e00e      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa4:	e00b      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aaa:	e008      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	e005      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab6:	e002      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000ab8:	2310      	movs	r3, #16
 8000aba:	e000      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000abc:	2301      	movs	r3, #1
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_DMA_Abort_IT+0xe8>)
 8000ac0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	4798      	blx	r3
    } 
  }
  return status;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40020008 	.word	0x40020008
 8000af0:	4002001c 	.word	0x4002001c
 8000af4:	40020030 	.word	0x40020030
 8000af8:	40020044 	.word	0x40020044
 8000afc:	40020058 	.word	0x40020058
 8000b00:	4002006c 	.word	0x4002006c
 8000b04:	40020000 	.word	0x40020000

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b08b      	sub	sp, #44	; 0x2c
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1a:	e169      	b.n	8000df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f040 8158 	bne.w	8000dea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	4a9a      	ldr	r2, [pc, #616]	; (8000da8 <HAL_GPIO_Init+0x2a0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d05e      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
 8000b44:	4a98      	ldr	r2, [pc, #608]	; (8000da8 <HAL_GPIO_Init+0x2a0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d875      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b4a:	4a98      	ldr	r2, [pc, #608]	; (8000dac <HAL_GPIO_Init+0x2a4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d058      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
 8000b50:	4a96      	ldr	r2, [pc, #600]	; (8000dac <HAL_GPIO_Init+0x2a4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d86f      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b56:	4a96      	ldr	r2, [pc, #600]	; (8000db0 <HAL_GPIO_Init+0x2a8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d052      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
 8000b5c:	4a94      	ldr	r2, [pc, #592]	; (8000db0 <HAL_GPIO_Init+0x2a8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d869      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b62:	4a94      	ldr	r2, [pc, #592]	; (8000db4 <HAL_GPIO_Init+0x2ac>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d04c      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
 8000b68:	4a92      	ldr	r2, [pc, #584]	; (8000db4 <HAL_GPIO_Init+0x2ac>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d863      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b6e:	4a92      	ldr	r2, [pc, #584]	; (8000db8 <HAL_GPIO_Init+0x2b0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d046      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
 8000b74:	4a90      	ldr	r2, [pc, #576]	; (8000db8 <HAL_GPIO_Init+0x2b0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d85d      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b7a:	2b12      	cmp	r3, #18
 8000b7c:	d82a      	bhi.n	8000bd4 <HAL_GPIO_Init+0xcc>
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d859      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b82:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <HAL_GPIO_Init+0x80>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000c03 	.word	0x08000c03
 8000b8c:	08000bdd 	.word	0x08000bdd
 8000b90:	08000bef 	.word	0x08000bef
 8000b94:	08000c31 	.word	0x08000c31
 8000b98:	08000c37 	.word	0x08000c37
 8000b9c:	08000c37 	.word	0x08000c37
 8000ba0:	08000c37 	.word	0x08000c37
 8000ba4:	08000c37 	.word	0x08000c37
 8000ba8:	08000c37 	.word	0x08000c37
 8000bac:	08000c37 	.word	0x08000c37
 8000bb0:	08000c37 	.word	0x08000c37
 8000bb4:	08000c37 	.word	0x08000c37
 8000bb8:	08000c37 	.word	0x08000c37
 8000bbc:	08000c37 	.word	0x08000c37
 8000bc0:	08000c37 	.word	0x08000c37
 8000bc4:	08000c37 	.word	0x08000c37
 8000bc8:	08000c37 	.word	0x08000c37
 8000bcc:	08000be5 	.word	0x08000be5
 8000bd0:	08000bf9 	.word	0x08000bf9
 8000bd4:	4a79      	ldr	r2, [pc, #484]	; (8000dbc <HAL_GPIO_Init+0x2b4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d013      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bda:	e02c      	b.n	8000c36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	623b      	str	r3, [r7, #32]
          break;
 8000be2:	e029      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	3304      	adds	r3, #4
 8000bea:	623b      	str	r3, [r7, #32]
          break;
 8000bec:	e024      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	3308      	adds	r3, #8
 8000bf4:	623b      	str	r3, [r7, #32]
          break;
 8000bf6:	e01f      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	330c      	adds	r3, #12
 8000bfe:	623b      	str	r3, [r7, #32]
          break;
 8000c00:	e01a      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	623b      	str	r3, [r7, #32]
          break;
 8000c0e:	e013      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d105      	bne.n	8000c24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	611a      	str	r2, [r3, #16]
          break;
 8000c22:	e009      	b.n	8000c38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c24:	2308      	movs	r3, #8
 8000c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	615a      	str	r2, [r3, #20]
          break;
 8000c2e:	e003      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e000      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          break;
 8000c36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	2bff      	cmp	r3, #255	; 0xff
 8000c3c:	d801      	bhi.n	8000c42 <HAL_GPIO_Init+0x13a>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	e001      	b.n	8000c46 <HAL_GPIO_Init+0x13e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3304      	adds	r3, #4
 8000c46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	2bff      	cmp	r3, #255	; 0xff
 8000c4c:	d802      	bhi.n	8000c54 <HAL_GPIO_Init+0x14c>
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	e002      	b.n	8000c5a <HAL_GPIO_Init+0x152>
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	3b08      	subs	r3, #8
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	210f      	movs	r1, #15
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	6a39      	ldr	r1, [r7, #32]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	431a      	orrs	r2, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 80b1 	beq.w	8000dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c88:	4b4d      	ldr	r3, [pc, #308]	; (8000dc0 <HAL_GPIO_Init+0x2b8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a4c      	ldr	r2, [pc, #304]	; (8000dc0 <HAL_GPIO_Init+0x2b8>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <HAL_GPIO_Init+0x2b8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca0:	4a48      	ldr	r2, [pc, #288]	; (8000dc4 <HAL_GPIO_Init+0x2bc>)
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a40      	ldr	r2, [pc, #256]	; (8000dc8 <HAL_GPIO_Init+0x2c0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d013      	beq.n	8000cf4 <HAL_GPIO_Init+0x1ec>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a3f      	ldr	r2, [pc, #252]	; (8000dcc <HAL_GPIO_Init+0x2c4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d00d      	beq.n	8000cf0 <HAL_GPIO_Init+0x1e8>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a3e      	ldr	r2, [pc, #248]	; (8000dd0 <HAL_GPIO_Init+0x2c8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d007      	beq.n	8000cec <HAL_GPIO_Init+0x1e4>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3d      	ldr	r2, [pc, #244]	; (8000dd4 <HAL_GPIO_Init+0x2cc>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d101      	bne.n	8000ce8 <HAL_GPIO_Init+0x1e0>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000ce8:	2304      	movs	r3, #4
 8000cea:	e004      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d06:	492f      	ldr	r1, [pc, #188]	; (8000dc4 <HAL_GPIO_Init+0x2bc>)
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	492c      	ldr	r1, [pc, #176]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4928      	ldr	r1, [pc, #160]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4922      	ldr	r1, [pc, #136]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	491e      	ldr	r1, [pc, #120]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	4918      	ldr	r1, [pc, #96]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4914      	ldr	r1, [pc, #80]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d021      	beq.n	8000ddc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
 8000da4:	e021      	b.n	8000dea <HAL_GPIO_Init+0x2e2>
 8000da6:	bf00      	nop
 8000da8:	10320000 	.word	0x10320000
 8000dac:	10310000 	.word	0x10310000
 8000db0:	10220000 	.word	0x10220000
 8000db4:	10210000 	.word	0x10210000
 8000db8:	10120000 	.word	0x10120000
 8000dbc:	10110000 	.word	0x10110000
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40011400 	.word	0x40011400
 8000dd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_GPIO_Init+0x304>)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	4909      	ldr	r1, [pc, #36]	; (8000e0c <HAL_GPIO_Init+0x304>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	3301      	adds	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f47f ae8e 	bne.w	8000b1c <HAL_GPIO_Init+0x14>
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	372c      	adds	r7, #44	; 0x2c
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40010400 	.word	0x40010400

08000e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e001      	b.n	8000e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e4e:	787b      	ldrb	r3, [r7, #1]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e54:	887a      	ldrh	r2, [r7, #2]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e5a:	e003      	b.n	8000e64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	041a      	lsls	r2, r3, #16
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	611a      	str	r2, [r3, #16]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
	...

08000e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e272      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8087 	beq.w	8000f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e90:	4b92      	ldr	r3, [pc, #584]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d00c      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e9c:	4b8f      	ldr	r3, [pc, #572]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d112      	bne.n	8000ece <HAL_RCC_OscConfig+0x5e>
 8000ea8:	4b8c      	ldr	r3, [pc, #560]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb4:	d10b      	bne.n	8000ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	4b89      	ldr	r3, [pc, #548]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d06c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x12c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d168      	bne.n	8000f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e24c      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed6:	d106      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x76>
 8000ed8:	4b80      	ldr	r3, [pc, #512]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a7f      	ldr	r2, [pc, #508]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e02e      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x98>
 8000eee:	4b7b      	ldr	r3, [pc, #492]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a7a      	ldr	r2, [pc, #488]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b78      	ldr	r3, [pc, #480]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a77      	ldr	r2, [pc, #476]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e01d      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0xbc>
 8000f12:	4b72      	ldr	r3, [pc, #456]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a71      	ldr	r2, [pc, #452]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b6f      	ldr	r3, [pc, #444]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a6e      	ldr	r2, [pc, #440]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00b      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000f2c:	4b6b      	ldr	r3, [pc, #428]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a6a      	ldr	r2, [pc, #424]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b68      	ldr	r3, [pc, #416]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a67      	ldr	r2, [pc, #412]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fbf0 	bl	8000730 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fbec 	bl	8000730 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e200      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0xe4>
 8000f72:	e014      	b.n	8000f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fbdc 	bl	8000730 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fbd8 	bl	8000730 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1ec      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8e:	4b53      	ldr	r3, [pc, #332]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x10c>
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d063      	beq.n	8001072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000faa:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fb6:	4b49      	ldr	r3, [pc, #292]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d11c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x18c>
 8000fc2:	4b46      	ldr	r3, [pc, #280]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d116      	bne.n	8000ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x176>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e1c0      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4939      	ldr	r1, [pc, #228]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	e03a      	b.n	8001072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d020      	beq.n	8001046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_RCC_OscConfig+0x270>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fb91 	bl	8000730 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fb8d 	bl	8000730 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e1a1      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4927      	ldr	r1, [pc, #156]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]
 8001044:	e015      	b.n	8001072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_RCC_OscConfig+0x270>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fb70 	bl	8000730 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001054:	f7ff fb6c 	bl	8000730 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e180      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d03a      	beq.n	80010f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d019      	beq.n	80010ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_RCC_OscConfig+0x274>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108c:	f7ff fb50 	bl	8000730 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fb4c 	bl	8000730 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e160      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 fad8 	bl	8001668 <RCC_Delay>
 80010b8:	e01c      	b.n	80010f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_RCC_OscConfig+0x274>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fb36 	bl	8000730 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c6:	e00f      	b.n	80010e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff fb32 	bl	8000730 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d908      	bls.n	80010e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e146      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	42420000 	.word	0x42420000
 80010e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e8:	4b92      	ldr	r3, [pc, #584]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1e9      	bne.n	80010c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80a6 	beq.w	800124e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001106:	4b8b      	ldr	r3, [pc, #556]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10d      	bne.n	800112e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b88      	ldr	r3, [pc, #544]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a87      	ldr	r2, [pc, #540]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b85      	ldr	r3, [pc, #532]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112e:	4b82      	ldr	r3, [pc, #520]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	2b00      	cmp	r3, #0
 8001138:	d118      	bne.n	800116c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113a:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a7e      	ldr	r2, [pc, #504]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001146:	f7ff faf3 	bl	8000730 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114e:	f7ff faef 	bl	8000730 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b64      	cmp	r3, #100	; 0x64
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e103      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001160:	4b75      	ldr	r3, [pc, #468]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x312>
 8001174:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4a6e      	ldr	r2, [pc, #440]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6213      	str	r3, [r2, #32]
 8001180:	e02d      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x334>
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a69      	ldr	r2, [pc, #420]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b67      	ldr	r3, [pc, #412]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a66      	ldr	r2, [pc, #408]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	e01c      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d10c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x356>
 80011ac:	4b61      	ldr	r3, [pc, #388]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a60      	ldr	r2, [pc, #384]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	4b5e      	ldr	r3, [pc, #376]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a5d      	ldr	r2, [pc, #372]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6213      	str	r3, [r2, #32]
 80011c4:	e00b      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 80011c6:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a5a      	ldr	r2, [pc, #360]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	4b58      	ldr	r3, [pc, #352]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a57      	ldr	r2, [pc, #348]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f023 0304 	bic.w	r3, r3, #4
 80011dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d015      	beq.n	8001212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e6:	f7ff faa3 	bl	8000730 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	e00a      	b.n	8001204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff fa9f 	bl	8000730 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0b1      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ee      	beq.n	80011ee <HAL_RCC_OscConfig+0x37e>
 8001210:	e014      	b.n	800123c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff fa8d 	bl	8000730 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff fa89 	bl	8000730 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f241 3288 	movw	r2, #5000	; 0x1388
 8001228:	4293      	cmp	r3, r2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e09b      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	4b40      	ldr	r3, [pc, #256]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1ee      	bne.n	800121a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a3b      	ldr	r2, [pc, #236]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8087 	beq.w	8001366 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001258:	4b36      	ldr	r3, [pc, #216]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	2b08      	cmp	r3, #8
 8001262:	d061      	beq.n	8001328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d146      	bne.n	80012fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126c:	4b33      	ldr	r3, [pc, #204]	; (800133c <HAL_RCC_OscConfig+0x4cc>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fa5d 	bl	8000730 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff fa59 	bl	8000730 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e06d      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128c:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d108      	bne.n	80012b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4921      	ldr	r1, [pc, #132]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a19      	ldr	r1, [r3, #32]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	430b      	orrs	r3, r1
 80012c6:	491b      	ldr	r1, [pc, #108]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x4cc>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fa2d 	bl	8000730 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fa29 	bl	8000730 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e03d      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x46a>
 80012f8:	e035      	b.n	8001366 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_RCC_OscConfig+0x4cc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fa16 	bl	8000730 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fa12 	bl	8000730 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e026      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x498>
 8001326:	e01e      	b.n	8001366 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d107      	bne.n	8001340 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e019      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
 8001334:	40021000 	.word	0x40021000
 8001338:	40007000 	.word	0x40007000
 800133c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_OscConfig+0x500>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	429a      	cmp	r2, r3
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0d0      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d910      	bls.n	80013b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b67      	ldr	r3, [pc, #412]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 0207 	bic.w	r2, r3, #7
 800139e:	4965      	ldr	r1, [pc, #404]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0b8      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d0:	4b59      	ldr	r3, [pc, #356]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a58      	ldr	r2, [pc, #352]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	494d      	ldr	r1, [pc, #308]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d040      	beq.n	8001494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d115      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e07f      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e073      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06b      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f023 0203 	bic.w	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4936      	ldr	r1, [pc, #216]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001464:	f7ff f964 	bl	8000730 <HAL_GetTick>
 8001468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	e00a      	b.n	8001482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff f960 	bl	8000730 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e053      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 020c 	and.w	r2, r3, #12
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	429a      	cmp	r2, r3
 8001492:	d1eb      	bne.n	800146c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d210      	bcs.n	80014c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 0207 	bic.w	r2, r3, #7
 80014aa:	4922      	ldr	r1, [pc, #136]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e032      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4916      	ldr	r1, [pc, #88]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	490e      	ldr	r1, [pc, #56]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001502:	f000 f821 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 8001506:	4602      	mov	r2, r0
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	490a      	ldr	r1, [pc, #40]	; (800153c <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	5ccb      	ldrb	r3, [r1, r3]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_RCC_ClockConfig+0x1cc>)
 800151c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1d0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f8c2 	bl	80006ac <HAL_InitTick>

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000
 8001538:	40021000 	.word	0x40021000
 800153c:	08002ad0 	.word	0x08002ad0
 8001540:	20000000 	.word	0x20000000
 8001544:	20000004 	.word	0x20000004

08001548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001548:	b490      	push	{r4, r7}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001550:	1d3c      	adds	r4, r7, #4
 8001552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001558:	f240 2301 	movw	r3, #513	; 0x201
 800155c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b04      	cmp	r3, #4
 8001580:	d002      	beq.n	8001588 <HAL_RCC_GetSysClockFreq+0x40>
 8001582:	2b08      	cmp	r3, #8
 8001584:	d003      	beq.n	800158e <HAL_RCC_GetSysClockFreq+0x46>
 8001586:	e02b      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800158a:	623b      	str	r3, [r7, #32]
      break;
 800158c:	e02b      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	0c9b      	lsrs	r3, r3, #18
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3328      	adds	r3, #40	; 0x28
 8001598:	443b      	add	r3, r7
 800159a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800159e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d012      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	0c5b      	lsrs	r3, r3, #17
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	3328      	adds	r3, #40	; 0x28
 80015b6:	443b      	add	r3, r7
 80015b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
 80015ce:	e004      	b.n	80015da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	623b      	str	r3, [r7, #32]
      break;
 80015de:	e002      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80015e2:	623b      	str	r3, [r7, #32]
      break;
 80015e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015e6:	6a3b      	ldr	r3, [r7, #32]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc90      	pop	{r4, r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	08002ac0 	.word	0x08002ac0
 80015f8:	40021000 	.word	0x40021000
 80015fc:	007a1200 	.word	0x007a1200
 8001600:	003d0900 	.word	0x003d0900

08001604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <HAL_RCC_GetHCLKFreq+0x10>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000000 	.word	0x20000000

08001618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800161c:	f7ff fff2 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 8001620:	4602      	mov	r2, r0
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	4903      	ldr	r1, [pc, #12]	; (800163c <HAL_RCC_GetPCLK1Freq+0x24>)
 800162e:	5ccb      	ldrb	r3, [r1, r3]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000
 800163c:	08002ae0 	.word	0x08002ae0

08001640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001644:	f7ff ffde 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 8001648:	4602      	mov	r2, r0
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	0adb      	lsrs	r3, r3, #11
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	4903      	ldr	r1, [pc, #12]	; (8001664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001656:	5ccb      	ldrb	r3, [r1, r3]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	08002ae0 	.word	0x08002ae0

08001668 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <RCC_Delay+0x34>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <RCC_Delay+0x38>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0a5b      	lsrs	r3, r3, #9
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001684:	bf00      	nop
  }
  while (Delay --);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1e5a      	subs	r2, r3, #1
 800168a:	60fa      	str	r2, [r7, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f9      	bne.n	8001684 <RCC_Delay+0x1c>
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	20000000 	.word	0x20000000
 80016a0:	10624dd3 	.word	0x10624dd3

080016a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e03f      	b.n	8001736 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7fe fef0 	bl	80004b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2224      	movs	r2, #36	; 0x24
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fca1 	bl	8002030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800170c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800171c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2220      	movs	r2, #32
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b08a      	sub	sp, #40	; 0x28
 8001742:	af02      	add	r7, sp, #8
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4613      	mov	r3, r2
 800174c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b20      	cmp	r3, #32
 800175c:	d17c      	bne.n	8001858 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_UART_Transmit+0x2c>
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e075      	b.n	800185a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_UART_Transmit+0x3e>
 8001778:	2302      	movs	r3, #2
 800177a:	e06e      	b.n	800185a <HAL_UART_Transmit+0x11c>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2221      	movs	r2, #33	; 0x21
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001792:	f7fe ffcd 	bl	8000730 <HAL_GetTick>
 8001796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	88fa      	ldrh	r2, [r7, #6]
 800179c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	88fa      	ldrh	r2, [r7, #6]
 80017a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ac:	d108      	bne.n	80017c0 <HAL_UART_Transmit+0x82>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d104      	bne.n	80017c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	e003      	b.n	80017c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80017d0:	e02a      	b.n	8001828 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2200      	movs	r2, #0
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fa54 	bl	8001c8a <UART_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e036      	b.n	800185a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10b      	bne.n	800180a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001800:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	3302      	adds	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	e007      	b.n	800181a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	3301      	adds	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800181e:	b29b      	uxth	r3, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800182c:	b29b      	uxth	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1cf      	bne.n	80017d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	2140      	movs	r1, #64	; 0x40
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 fa24 	bl	8001c8a <UART_WaitOnFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e006      	b.n	800185a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2220      	movs	r2, #32
 8001850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	e000      	b.n	800185a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001858:	2302      	movs	r3, #2
  }
}
 800185a:	4618      	mov	r0, r3
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	4613      	mov	r3, r2
 800186e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b20      	cmp	r3, #32
 800187a:	d13c      	bne.n	80018f6 <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e035      	b.n	80018f8 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8001896:	2302      	movs	r3, #2
 8001898:	e02e      	b.n	80018f8 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fa35 	bl	8001d1e <UART_Start_Receive_IT>
 80018b4:	4603      	mov	r3, r0
 80018b6:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d119      	bne.n	80018f2 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d113      	bne.n	80018ee <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0210 	orr.w	r2, r2, #16
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	e001      	b.n	80018f2 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	e000      	b.n	80018f8 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 80018f6:	2302      	movs	r3, #2
  }
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10d      	bne.n	8001952 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_UART_IRQHandler+0x52>
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f003 0320 	and.w	r3, r3, #32
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fac7 	bl	8001ede <UART_Receive_IT>
      return;
 8001950:	e17b      	b.n	8001c4a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80b1 	beq.w	8001abc <HAL_UART_IRQHandler+0x1bc>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <HAL_UART_IRQHandler+0x70>
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80a6 	beq.w	8001abc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00a      	beq.n	8001990 <HAL_UART_IRQHandler+0x90>
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00a      	beq.n	80019b0 <HAL_UART_IRQHandler+0xb0>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f043 0202 	orr.w	r2, r3, #2
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <HAL_UART_IRQHandler+0xd0>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f043 0204 	orr.w	r2, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00f      	beq.n	80019fa <HAL_UART_IRQHandler+0xfa>
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d104      	bne.n	80019ee <HAL_UART_IRQHandler+0xee>
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f043 0208 	orr.w	r2, r3, #8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 811e 	beq.w	8001c40 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_UART_IRQHandler+0x11e>
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fa60 	bl	8001ede <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <HAL_UART_IRQHandler+0x146>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d031      	beq.n	8001aaa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f9a2 	bl	8001d90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d023      	beq.n	8001aa2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a68:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d013      	beq.n	8001a9a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	4a76      	ldr	r2, [pc, #472]	; (8001c50 <HAL_UART_IRQHandler+0x350>)
 8001a78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe ffcc 	bl	8000a1c <HAL_DMA_Abort_IT>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d016      	beq.n	8001ab8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a94:	4610      	mov	r0, r2
 8001a96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a98:	e00e      	b.n	8001ab8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f8ec 	bl	8001c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aa0:	e00a      	b.n	8001ab8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f8e8 	bl	8001c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aa8:	e006      	b.n	8001ab8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8e4 	bl	8001c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001ab6:	e0c3      	b.n	8001c40 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ab8:	bf00      	nop
    return;
 8001aba:	e0c1      	b.n	8001c40 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	f040 80a1 	bne.w	8001c08 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 809b 	beq.w	8001c08 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8095 	beq.w	8001c08 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d04e      	beq.n	8001ba0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001b0c:	8a3b      	ldrh	r3, [r7, #16]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8098 	beq.w	8001c44 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b18:	8a3a      	ldrh	r2, [r7, #16]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	f080 8092 	bcs.w	8001c44 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	8a3a      	ldrh	r2, [r7, #16]
 8001b24:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d02b      	beq.n	8001b88 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b3e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b5e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0210 	bic.w	r2, r2, #16
 8001b7c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe ff0f 	bl	80009a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7fe fb03 	bl	80001a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001b9e:	e051      	b.n	8001c44 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d047      	beq.n	8001c48 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001bb8:	8a7b      	ldrh	r3, [r7, #18]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d044      	beq.n	8001c48 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001bcc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0210 	bic.w	r2, r2, #16
 8001bfa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001bfc:	8a7b      	ldrh	r3, [r7, #18]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7fe facf 	bl	80001a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001c06:	e01f      	b.n	8001c48 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_UART_IRQHandler+0x324>
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8f7 	bl	8001e10 <UART_Transmit_IT>
    return;
 8001c22:	e012      	b.n	8001c4a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00d      	beq.n	8001c4a <HAL_UART_IRQHandler+0x34a>
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f938 	bl	8001eae <UART_EndTransmit_IT>
    return;
 8001c3e:	e004      	b.n	8001c4a <HAL_UART_IRQHandler+0x34a>
    return;
 8001c40:	bf00      	nop
 8001c42:	e002      	b.n	8001c4a <HAL_UART_IRQHandler+0x34a>
      return;
 8001c44:	bf00      	nop
 8001c46:	e000      	b.n	8001c4a <HAL_UART_IRQHandler+0x34a>
      return;
 8001c48:	bf00      	nop
  }
}
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	08001de9 	.word	0x08001de9

08001c54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c9a:	e02c      	b.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	d028      	beq.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <UART_WaitOnFlagUntilTimeout+0x30>
 8001caa:	f7fe fd41 	bl	8000730 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d21d      	bcs.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cc8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e00f      	b.n	8001d16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	bf0c      	ite	eq
 8001d06:	2301      	moveq	r3, #1
 8001d08:	2300      	movne	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d0c3      	beq.n	8001c9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	88fa      	ldrh	r2, [r7, #6]
 8001d36:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	88fa      	ldrh	r2, [r7, #6]
 8001d3c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2222      	movs	r2, #34	; 0x22
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d62:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0220 	orr.w	r2, r2, #32
 8001d82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001da6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0210 	bic.w	r2, r2, #16
 8001dce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7ff ff38 	bl	8001c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b21      	cmp	r3, #33	; 0x21
 8001e22:	d13e      	bne.n	8001ea2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2c:	d114      	bne.n	8001e58 <UART_Transmit_IT+0x48>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d110      	bne.n	8001e58 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	1c9a      	adds	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	621a      	str	r2, [r3, #32]
 8001e56:	e008      	b.n	8001e6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	1c59      	adds	r1, r3, #1
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6211      	str	r1, [r2, #32]
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4619      	mov	r1, r3
 8001e78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ec4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fec0 	bl	8001c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b22      	cmp	r3, #34	; 0x22
 8001ef0:	f040 8099 	bne.w	8002026 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efc:	d117      	bne.n	8001f2e <UART_Receive_IT+0x50>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d113      	bne.n	8001f2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	1c9a      	adds	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f2c:	e026      	b.n	8001f7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f40:	d007      	beq.n	8001f52 <UART_Receive_IT+0x74>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <UART_Receive_IT+0x82>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e008      	b.n	8001f72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d148      	bne.n	8002022 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0220 	bic.w	r2, r2, #32
 8001f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d123      	bne.n	8002018 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0210 	bic.w	r2, r2, #16
 8001fe4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d10a      	bne.n	800200a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7fe f8c7 	bl	80001a4 <HAL_UARTEx_RxEventCallback>
 8002016:	e002      	b.n	800201e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fe24 	bl	8001c66 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e002      	b.n	8002028 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002026:	2302      	movs	r3, #2
  }
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800206a:	f023 030c 	bic.w	r3, r3, #12
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	430b      	orrs	r3, r1
 8002076:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2c      	ldr	r2, [pc, #176]	; (8002144 <UART_SetConfig+0x114>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d103      	bne.n	80020a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002098:	f7ff fad2 	bl	8001640 <HAL_RCC_GetPCLK2Freq>
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	e002      	b.n	80020a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020a0:	f7ff faba 	bl	8001618 <HAL_RCC_GetPCLK1Freq>
 80020a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	009a      	lsls	r2, r3, #2
 80020b0:	441a      	add	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	4a22      	ldr	r2, [pc, #136]	; (8002148 <UART_SetConfig+0x118>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	0119      	lsls	r1, r3, #4
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	009a      	lsls	r2, r3, #2
 80020d0:	441a      	add	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <UART_SetConfig+0x118>)
 80020de:	fba3 0302 	umull	r0, r3, r3, r2
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2064      	movs	r0, #100	; 0x64
 80020e6:	fb00 f303 	mul.w	r3, r0, r3
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	3332      	adds	r3, #50	; 0x32
 80020f0:	4a15      	ldr	r2, [pc, #84]	; (8002148 <UART_SetConfig+0x118>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020fc:	4419      	add	r1, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009a      	lsls	r2, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fbb2 f2f3 	udiv	r2, r2, r3
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <UART_SetConfig+0x118>)
 8002116:	fba3 0302 	umull	r0, r3, r3, r2
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2064      	movs	r0, #100	; 0x64
 800211e:	fb00 f303 	mul.w	r3, r0, r3
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	3332      	adds	r3, #50	; 0x32
 8002128:	4a07      	ldr	r2, [pc, #28]	; (8002148 <UART_SetConfig+0x118>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	f003 020f 	and.w	r2, r3, #15
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	440a      	add	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40013800 	.word	0x40013800
 8002148:	51eb851f 	.word	0x51eb851f

0800214c <__errno>:
 800214c:	4b01      	ldr	r3, [pc, #4]	; (8002154 <__errno+0x8>)
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	2000000c 	.word	0x2000000c

08002158 <__libc_init_array>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	2600      	movs	r6, #0
 800215c:	4d0c      	ldr	r5, [pc, #48]	; (8002190 <__libc_init_array+0x38>)
 800215e:	4c0d      	ldr	r4, [pc, #52]	; (8002194 <__libc_init_array+0x3c>)
 8002160:	1b64      	subs	r4, r4, r5
 8002162:	10a4      	asrs	r4, r4, #2
 8002164:	42a6      	cmp	r6, r4
 8002166:	d109      	bne.n	800217c <__libc_init_array+0x24>
 8002168:	f000 fc9c 	bl	8002aa4 <_init>
 800216c:	2600      	movs	r6, #0
 800216e:	4d0a      	ldr	r5, [pc, #40]	; (8002198 <__libc_init_array+0x40>)
 8002170:	4c0a      	ldr	r4, [pc, #40]	; (800219c <__libc_init_array+0x44>)
 8002172:	1b64      	subs	r4, r4, r5
 8002174:	10a4      	asrs	r4, r4, #2
 8002176:	42a6      	cmp	r6, r4
 8002178:	d105      	bne.n	8002186 <__libc_init_array+0x2e>
 800217a:	bd70      	pop	{r4, r5, r6, pc}
 800217c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002180:	4798      	blx	r3
 8002182:	3601      	adds	r6, #1
 8002184:	e7ee      	b.n	8002164 <__libc_init_array+0xc>
 8002186:	f855 3b04 	ldr.w	r3, [r5], #4
 800218a:	4798      	blx	r3
 800218c:	3601      	adds	r6, #1
 800218e:	e7f2      	b.n	8002176 <__libc_init_array+0x1e>
 8002190:	08002b1c 	.word	0x08002b1c
 8002194:	08002b1c 	.word	0x08002b1c
 8002198:	08002b1c 	.word	0x08002b1c
 800219c:	08002b20 	.word	0x08002b20

080021a0 <memset>:
 80021a0:	4603      	mov	r3, r0
 80021a2:	4402      	add	r2, r0
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d100      	bne.n	80021aa <memset+0xa>
 80021a8:	4770      	bx	lr
 80021aa:	f803 1b01 	strb.w	r1, [r3], #1
 80021ae:	e7f9      	b.n	80021a4 <memset+0x4>

080021b0 <siprintf>:
 80021b0:	b40e      	push	{r1, r2, r3}
 80021b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021b6:	b500      	push	{lr}
 80021b8:	b09c      	sub	sp, #112	; 0x70
 80021ba:	ab1d      	add	r3, sp, #116	; 0x74
 80021bc:	9002      	str	r0, [sp, #8]
 80021be:	9006      	str	r0, [sp, #24]
 80021c0:	9107      	str	r1, [sp, #28]
 80021c2:	9104      	str	r1, [sp, #16]
 80021c4:	4808      	ldr	r0, [pc, #32]	; (80021e8 <siprintf+0x38>)
 80021c6:	4909      	ldr	r1, [pc, #36]	; (80021ec <siprintf+0x3c>)
 80021c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80021cc:	9105      	str	r1, [sp, #20]
 80021ce:	6800      	ldr	r0, [r0, #0]
 80021d0:	a902      	add	r1, sp, #8
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	f000 f868 	bl	80022a8 <_svfiprintf_r>
 80021d8:	2200      	movs	r2, #0
 80021da:	9b02      	ldr	r3, [sp, #8]
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	b01c      	add	sp, #112	; 0x70
 80021e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80021e4:	b003      	add	sp, #12
 80021e6:	4770      	bx	lr
 80021e8:	2000000c 	.word	0x2000000c
 80021ec:	ffff0208 	.word	0xffff0208

080021f0 <__ssputs_r>:
 80021f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021f4:	688e      	ldr	r6, [r1, #8]
 80021f6:	4682      	mov	sl, r0
 80021f8:	429e      	cmp	r6, r3
 80021fa:	460c      	mov	r4, r1
 80021fc:	4690      	mov	r8, r2
 80021fe:	461f      	mov	r7, r3
 8002200:	d838      	bhi.n	8002274 <__ssputs_r+0x84>
 8002202:	898a      	ldrh	r2, [r1, #12]
 8002204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002208:	d032      	beq.n	8002270 <__ssputs_r+0x80>
 800220a:	6825      	ldr	r5, [r4, #0]
 800220c:	6909      	ldr	r1, [r1, #16]
 800220e:	3301      	adds	r3, #1
 8002210:	eba5 0901 	sub.w	r9, r5, r1
 8002214:	6965      	ldr	r5, [r4, #20]
 8002216:	444b      	add	r3, r9
 8002218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800221c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002220:	106d      	asrs	r5, r5, #1
 8002222:	429d      	cmp	r5, r3
 8002224:	bf38      	it	cc
 8002226:	461d      	movcc	r5, r3
 8002228:	0553      	lsls	r3, r2, #21
 800222a:	d531      	bpl.n	8002290 <__ssputs_r+0xa0>
 800222c:	4629      	mov	r1, r5
 800222e:	f000 fb6f 	bl	8002910 <_malloc_r>
 8002232:	4606      	mov	r6, r0
 8002234:	b950      	cbnz	r0, 800224c <__ssputs_r+0x5c>
 8002236:	230c      	movs	r3, #12
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f8ca 3000 	str.w	r3, [sl]
 8002240:	89a3      	ldrh	r3, [r4, #12]
 8002242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002246:	81a3      	strh	r3, [r4, #12]
 8002248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800224c:	464a      	mov	r2, r9
 800224e:	6921      	ldr	r1, [r4, #16]
 8002250:	f000 face 	bl	80027f0 <memcpy>
 8002254:	89a3      	ldrh	r3, [r4, #12]
 8002256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800225a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225e:	81a3      	strh	r3, [r4, #12]
 8002260:	6126      	str	r6, [r4, #16]
 8002262:	444e      	add	r6, r9
 8002264:	6026      	str	r6, [r4, #0]
 8002266:	463e      	mov	r6, r7
 8002268:	6165      	str	r5, [r4, #20]
 800226a:	eba5 0509 	sub.w	r5, r5, r9
 800226e:	60a5      	str	r5, [r4, #8]
 8002270:	42be      	cmp	r6, r7
 8002272:	d900      	bls.n	8002276 <__ssputs_r+0x86>
 8002274:	463e      	mov	r6, r7
 8002276:	4632      	mov	r2, r6
 8002278:	4641      	mov	r1, r8
 800227a:	6820      	ldr	r0, [r4, #0]
 800227c:	f000 fac6 	bl	800280c <memmove>
 8002280:	68a3      	ldr	r3, [r4, #8]
 8002282:	2000      	movs	r0, #0
 8002284:	1b9b      	subs	r3, r3, r6
 8002286:	60a3      	str	r3, [r4, #8]
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	4433      	add	r3, r6
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	e7db      	b.n	8002248 <__ssputs_r+0x58>
 8002290:	462a      	mov	r2, r5
 8002292:	f000 fbb1 	bl	80029f8 <_realloc_r>
 8002296:	4606      	mov	r6, r0
 8002298:	2800      	cmp	r0, #0
 800229a:	d1e1      	bne.n	8002260 <__ssputs_r+0x70>
 800229c:	4650      	mov	r0, sl
 800229e:	6921      	ldr	r1, [r4, #16]
 80022a0:	f000 face 	bl	8002840 <_free_r>
 80022a4:	e7c7      	b.n	8002236 <__ssputs_r+0x46>
	...

080022a8 <_svfiprintf_r>:
 80022a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ac:	4698      	mov	r8, r3
 80022ae:	898b      	ldrh	r3, [r1, #12]
 80022b0:	4607      	mov	r7, r0
 80022b2:	061b      	lsls	r3, r3, #24
 80022b4:	460d      	mov	r5, r1
 80022b6:	4614      	mov	r4, r2
 80022b8:	b09d      	sub	sp, #116	; 0x74
 80022ba:	d50e      	bpl.n	80022da <_svfiprintf_r+0x32>
 80022bc:	690b      	ldr	r3, [r1, #16]
 80022be:	b963      	cbnz	r3, 80022da <_svfiprintf_r+0x32>
 80022c0:	2140      	movs	r1, #64	; 0x40
 80022c2:	f000 fb25 	bl	8002910 <_malloc_r>
 80022c6:	6028      	str	r0, [r5, #0]
 80022c8:	6128      	str	r0, [r5, #16]
 80022ca:	b920      	cbnz	r0, 80022d6 <_svfiprintf_r+0x2e>
 80022cc:	230c      	movs	r3, #12
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	e0d1      	b.n	800247a <_svfiprintf_r+0x1d2>
 80022d6:	2340      	movs	r3, #64	; 0x40
 80022d8:	616b      	str	r3, [r5, #20]
 80022da:	2300      	movs	r3, #0
 80022dc:	9309      	str	r3, [sp, #36]	; 0x24
 80022de:	2320      	movs	r3, #32
 80022e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022e4:	2330      	movs	r3, #48	; 0x30
 80022e6:	f04f 0901 	mov.w	r9, #1
 80022ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80022ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002494 <_svfiprintf_r+0x1ec>
 80022f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022f6:	4623      	mov	r3, r4
 80022f8:	469a      	mov	sl, r3
 80022fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022fe:	b10a      	cbz	r2, 8002304 <_svfiprintf_r+0x5c>
 8002300:	2a25      	cmp	r2, #37	; 0x25
 8002302:	d1f9      	bne.n	80022f8 <_svfiprintf_r+0x50>
 8002304:	ebba 0b04 	subs.w	fp, sl, r4
 8002308:	d00b      	beq.n	8002322 <_svfiprintf_r+0x7a>
 800230a:	465b      	mov	r3, fp
 800230c:	4622      	mov	r2, r4
 800230e:	4629      	mov	r1, r5
 8002310:	4638      	mov	r0, r7
 8002312:	f7ff ff6d 	bl	80021f0 <__ssputs_r>
 8002316:	3001      	adds	r0, #1
 8002318:	f000 80aa 	beq.w	8002470 <_svfiprintf_r+0x1c8>
 800231c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800231e:	445a      	add	r2, fp
 8002320:	9209      	str	r2, [sp, #36]	; 0x24
 8002322:	f89a 3000 	ldrb.w	r3, [sl]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80a2 	beq.w	8002470 <_svfiprintf_r+0x1c8>
 800232c:	2300      	movs	r3, #0
 800232e:	f04f 32ff 	mov.w	r2, #4294967295
 8002332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002336:	f10a 0a01 	add.w	sl, sl, #1
 800233a:	9304      	str	r3, [sp, #16]
 800233c:	9307      	str	r3, [sp, #28]
 800233e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002342:	931a      	str	r3, [sp, #104]	; 0x68
 8002344:	4654      	mov	r4, sl
 8002346:	2205      	movs	r2, #5
 8002348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800234c:	4851      	ldr	r0, [pc, #324]	; (8002494 <_svfiprintf_r+0x1ec>)
 800234e:	f000 fa41 	bl	80027d4 <memchr>
 8002352:	9a04      	ldr	r2, [sp, #16]
 8002354:	b9d8      	cbnz	r0, 800238e <_svfiprintf_r+0xe6>
 8002356:	06d0      	lsls	r0, r2, #27
 8002358:	bf44      	itt	mi
 800235a:	2320      	movmi	r3, #32
 800235c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002360:	0711      	lsls	r1, r2, #28
 8002362:	bf44      	itt	mi
 8002364:	232b      	movmi	r3, #43	; 0x2b
 8002366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800236a:	f89a 3000 	ldrb.w	r3, [sl]
 800236e:	2b2a      	cmp	r3, #42	; 0x2a
 8002370:	d015      	beq.n	800239e <_svfiprintf_r+0xf6>
 8002372:	4654      	mov	r4, sl
 8002374:	2000      	movs	r0, #0
 8002376:	f04f 0c0a 	mov.w	ip, #10
 800237a:	9a07      	ldr	r2, [sp, #28]
 800237c:	4621      	mov	r1, r4
 800237e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002382:	3b30      	subs	r3, #48	; 0x30
 8002384:	2b09      	cmp	r3, #9
 8002386:	d94e      	bls.n	8002426 <_svfiprintf_r+0x17e>
 8002388:	b1b0      	cbz	r0, 80023b8 <_svfiprintf_r+0x110>
 800238a:	9207      	str	r2, [sp, #28]
 800238c:	e014      	b.n	80023b8 <_svfiprintf_r+0x110>
 800238e:	eba0 0308 	sub.w	r3, r0, r8
 8002392:	fa09 f303 	lsl.w	r3, r9, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	46a2      	mov	sl, r4
 800239a:	9304      	str	r3, [sp, #16]
 800239c:	e7d2      	b.n	8002344 <_svfiprintf_r+0x9c>
 800239e:	9b03      	ldr	r3, [sp, #12]
 80023a0:	1d19      	adds	r1, r3, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	9103      	str	r1, [sp, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bfbb      	ittet	lt
 80023aa:	425b      	neglt	r3, r3
 80023ac:	f042 0202 	orrlt.w	r2, r2, #2
 80023b0:	9307      	strge	r3, [sp, #28]
 80023b2:	9307      	strlt	r3, [sp, #28]
 80023b4:	bfb8      	it	lt
 80023b6:	9204      	strlt	r2, [sp, #16]
 80023b8:	7823      	ldrb	r3, [r4, #0]
 80023ba:	2b2e      	cmp	r3, #46	; 0x2e
 80023bc:	d10c      	bne.n	80023d8 <_svfiprintf_r+0x130>
 80023be:	7863      	ldrb	r3, [r4, #1]
 80023c0:	2b2a      	cmp	r3, #42	; 0x2a
 80023c2:	d135      	bne.n	8002430 <_svfiprintf_r+0x188>
 80023c4:	9b03      	ldr	r3, [sp, #12]
 80023c6:	3402      	adds	r4, #2
 80023c8:	1d1a      	adds	r2, r3, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	9203      	str	r2, [sp, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bfb8      	it	lt
 80023d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80023d6:	9305      	str	r3, [sp, #20]
 80023d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002498 <_svfiprintf_r+0x1f0>
 80023dc:	2203      	movs	r2, #3
 80023de:	4650      	mov	r0, sl
 80023e0:	7821      	ldrb	r1, [r4, #0]
 80023e2:	f000 f9f7 	bl	80027d4 <memchr>
 80023e6:	b140      	cbz	r0, 80023fa <_svfiprintf_r+0x152>
 80023e8:	2340      	movs	r3, #64	; 0x40
 80023ea:	eba0 000a 	sub.w	r0, r0, sl
 80023ee:	fa03 f000 	lsl.w	r0, r3, r0
 80023f2:	9b04      	ldr	r3, [sp, #16]
 80023f4:	3401      	adds	r4, #1
 80023f6:	4303      	orrs	r3, r0
 80023f8:	9304      	str	r3, [sp, #16]
 80023fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023fe:	2206      	movs	r2, #6
 8002400:	4826      	ldr	r0, [pc, #152]	; (800249c <_svfiprintf_r+0x1f4>)
 8002402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002406:	f000 f9e5 	bl	80027d4 <memchr>
 800240a:	2800      	cmp	r0, #0
 800240c:	d038      	beq.n	8002480 <_svfiprintf_r+0x1d8>
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <_svfiprintf_r+0x1f8>)
 8002410:	bb1b      	cbnz	r3, 800245a <_svfiprintf_r+0x1b2>
 8002412:	9b03      	ldr	r3, [sp, #12]
 8002414:	3307      	adds	r3, #7
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	3308      	adds	r3, #8
 800241c:	9303      	str	r3, [sp, #12]
 800241e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002420:	4433      	add	r3, r6
 8002422:	9309      	str	r3, [sp, #36]	; 0x24
 8002424:	e767      	b.n	80022f6 <_svfiprintf_r+0x4e>
 8002426:	460c      	mov	r4, r1
 8002428:	2001      	movs	r0, #1
 800242a:	fb0c 3202 	mla	r2, ip, r2, r3
 800242e:	e7a5      	b.n	800237c <_svfiprintf_r+0xd4>
 8002430:	2300      	movs	r3, #0
 8002432:	f04f 0c0a 	mov.w	ip, #10
 8002436:	4619      	mov	r1, r3
 8002438:	3401      	adds	r4, #1
 800243a:	9305      	str	r3, [sp, #20]
 800243c:	4620      	mov	r0, r4
 800243e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002442:	3a30      	subs	r2, #48	; 0x30
 8002444:	2a09      	cmp	r2, #9
 8002446:	d903      	bls.n	8002450 <_svfiprintf_r+0x1a8>
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0c5      	beq.n	80023d8 <_svfiprintf_r+0x130>
 800244c:	9105      	str	r1, [sp, #20]
 800244e:	e7c3      	b.n	80023d8 <_svfiprintf_r+0x130>
 8002450:	4604      	mov	r4, r0
 8002452:	2301      	movs	r3, #1
 8002454:	fb0c 2101 	mla	r1, ip, r1, r2
 8002458:	e7f0      	b.n	800243c <_svfiprintf_r+0x194>
 800245a:	ab03      	add	r3, sp, #12
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	462a      	mov	r2, r5
 8002460:	4638      	mov	r0, r7
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <_svfiprintf_r+0x1fc>)
 8002464:	a904      	add	r1, sp, #16
 8002466:	f3af 8000 	nop.w
 800246a:	1c42      	adds	r2, r0, #1
 800246c:	4606      	mov	r6, r0
 800246e:	d1d6      	bne.n	800241e <_svfiprintf_r+0x176>
 8002470:	89ab      	ldrh	r3, [r5, #12]
 8002472:	065b      	lsls	r3, r3, #25
 8002474:	f53f af2c 	bmi.w	80022d0 <_svfiprintf_r+0x28>
 8002478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800247a:	b01d      	add	sp, #116	; 0x74
 800247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002480:	ab03      	add	r3, sp, #12
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	462a      	mov	r2, r5
 8002486:	4638      	mov	r0, r7
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <_svfiprintf_r+0x1fc>)
 800248a:	a904      	add	r1, sp, #16
 800248c:	f000 f87c 	bl	8002588 <_printf_i>
 8002490:	e7eb      	b.n	800246a <_svfiprintf_r+0x1c2>
 8002492:	bf00      	nop
 8002494:	08002ae8 	.word	0x08002ae8
 8002498:	08002aee 	.word	0x08002aee
 800249c:	08002af2 	.word	0x08002af2
 80024a0:	00000000 	.word	0x00000000
 80024a4:	080021f1 	.word	0x080021f1

080024a8 <_printf_common>:
 80024a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024ac:	4616      	mov	r6, r2
 80024ae:	4699      	mov	r9, r3
 80024b0:	688a      	ldr	r2, [r1, #8]
 80024b2:	690b      	ldr	r3, [r1, #16]
 80024b4:	4607      	mov	r7, r0
 80024b6:	4293      	cmp	r3, r2
 80024b8:	bfb8      	it	lt
 80024ba:	4613      	movlt	r3, r2
 80024bc:	6033      	str	r3, [r6, #0]
 80024be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024c2:	460c      	mov	r4, r1
 80024c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024c8:	b10a      	cbz	r2, 80024ce <_printf_common+0x26>
 80024ca:	3301      	adds	r3, #1
 80024cc:	6033      	str	r3, [r6, #0]
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	0699      	lsls	r1, r3, #26
 80024d2:	bf42      	ittt	mi
 80024d4:	6833      	ldrmi	r3, [r6, #0]
 80024d6:	3302      	addmi	r3, #2
 80024d8:	6033      	strmi	r3, [r6, #0]
 80024da:	6825      	ldr	r5, [r4, #0]
 80024dc:	f015 0506 	ands.w	r5, r5, #6
 80024e0:	d106      	bne.n	80024f0 <_printf_common+0x48>
 80024e2:	f104 0a19 	add.w	sl, r4, #25
 80024e6:	68e3      	ldr	r3, [r4, #12]
 80024e8:	6832      	ldr	r2, [r6, #0]
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	42ab      	cmp	r3, r5
 80024ee:	dc28      	bgt.n	8002542 <_printf_common+0x9a>
 80024f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024f4:	1e13      	subs	r3, r2, #0
 80024f6:	6822      	ldr	r2, [r4, #0]
 80024f8:	bf18      	it	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	0692      	lsls	r2, r2, #26
 80024fe:	d42d      	bmi.n	800255c <_printf_common+0xb4>
 8002500:	4649      	mov	r1, r9
 8002502:	4638      	mov	r0, r7
 8002504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002508:	47c0      	blx	r8
 800250a:	3001      	adds	r0, #1
 800250c:	d020      	beq.n	8002550 <_printf_common+0xa8>
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	68e5      	ldr	r5, [r4, #12]
 8002512:	f003 0306 	and.w	r3, r3, #6
 8002516:	2b04      	cmp	r3, #4
 8002518:	bf18      	it	ne
 800251a:	2500      	movne	r5, #0
 800251c:	6832      	ldr	r2, [r6, #0]
 800251e:	f04f 0600 	mov.w	r6, #0
 8002522:	68a3      	ldr	r3, [r4, #8]
 8002524:	bf08      	it	eq
 8002526:	1aad      	subeq	r5, r5, r2
 8002528:	6922      	ldr	r2, [r4, #16]
 800252a:	bf08      	it	eq
 800252c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002530:	4293      	cmp	r3, r2
 8002532:	bfc4      	itt	gt
 8002534:	1a9b      	subgt	r3, r3, r2
 8002536:	18ed      	addgt	r5, r5, r3
 8002538:	341a      	adds	r4, #26
 800253a:	42b5      	cmp	r5, r6
 800253c:	d11a      	bne.n	8002574 <_printf_common+0xcc>
 800253e:	2000      	movs	r0, #0
 8002540:	e008      	b.n	8002554 <_printf_common+0xac>
 8002542:	2301      	movs	r3, #1
 8002544:	4652      	mov	r2, sl
 8002546:	4649      	mov	r1, r9
 8002548:	4638      	mov	r0, r7
 800254a:	47c0      	blx	r8
 800254c:	3001      	adds	r0, #1
 800254e:	d103      	bne.n	8002558 <_printf_common+0xb0>
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002558:	3501      	adds	r5, #1
 800255a:	e7c4      	b.n	80024e6 <_printf_common+0x3e>
 800255c:	2030      	movs	r0, #48	; 0x30
 800255e:	18e1      	adds	r1, r4, r3
 8002560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800256a:	4422      	add	r2, r4
 800256c:	3302      	adds	r3, #2
 800256e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002572:	e7c5      	b.n	8002500 <_printf_common+0x58>
 8002574:	2301      	movs	r3, #1
 8002576:	4622      	mov	r2, r4
 8002578:	4649      	mov	r1, r9
 800257a:	4638      	mov	r0, r7
 800257c:	47c0      	blx	r8
 800257e:	3001      	adds	r0, #1
 8002580:	d0e6      	beq.n	8002550 <_printf_common+0xa8>
 8002582:	3601      	adds	r6, #1
 8002584:	e7d9      	b.n	800253a <_printf_common+0x92>
	...

08002588 <_printf_i>:
 8002588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800258c:	7e0f      	ldrb	r7, [r1, #24]
 800258e:	4691      	mov	r9, r2
 8002590:	2f78      	cmp	r7, #120	; 0x78
 8002592:	4680      	mov	r8, r0
 8002594:	460c      	mov	r4, r1
 8002596:	469a      	mov	sl, r3
 8002598:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800259a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800259e:	d807      	bhi.n	80025b0 <_printf_i+0x28>
 80025a0:	2f62      	cmp	r7, #98	; 0x62
 80025a2:	d80a      	bhi.n	80025ba <_printf_i+0x32>
 80025a4:	2f00      	cmp	r7, #0
 80025a6:	f000 80d9 	beq.w	800275c <_printf_i+0x1d4>
 80025aa:	2f58      	cmp	r7, #88	; 0x58
 80025ac:	f000 80a4 	beq.w	80026f8 <_printf_i+0x170>
 80025b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025b8:	e03a      	b.n	8002630 <_printf_i+0xa8>
 80025ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025be:	2b15      	cmp	r3, #21
 80025c0:	d8f6      	bhi.n	80025b0 <_printf_i+0x28>
 80025c2:	a101      	add	r1, pc, #4	; (adr r1, 80025c8 <_printf_i+0x40>)
 80025c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025c8:	08002621 	.word	0x08002621
 80025cc:	08002635 	.word	0x08002635
 80025d0:	080025b1 	.word	0x080025b1
 80025d4:	080025b1 	.word	0x080025b1
 80025d8:	080025b1 	.word	0x080025b1
 80025dc:	080025b1 	.word	0x080025b1
 80025e0:	08002635 	.word	0x08002635
 80025e4:	080025b1 	.word	0x080025b1
 80025e8:	080025b1 	.word	0x080025b1
 80025ec:	080025b1 	.word	0x080025b1
 80025f0:	080025b1 	.word	0x080025b1
 80025f4:	08002743 	.word	0x08002743
 80025f8:	08002665 	.word	0x08002665
 80025fc:	08002725 	.word	0x08002725
 8002600:	080025b1 	.word	0x080025b1
 8002604:	080025b1 	.word	0x080025b1
 8002608:	08002765 	.word	0x08002765
 800260c:	080025b1 	.word	0x080025b1
 8002610:	08002665 	.word	0x08002665
 8002614:	080025b1 	.word	0x080025b1
 8002618:	080025b1 	.word	0x080025b1
 800261c:	0800272d 	.word	0x0800272d
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	1d1a      	adds	r2, r3, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	602a      	str	r2, [r5, #0]
 8002628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800262c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002630:	2301      	movs	r3, #1
 8002632:	e0a4      	b.n	800277e <_printf_i+0x1f6>
 8002634:	6820      	ldr	r0, [r4, #0]
 8002636:	6829      	ldr	r1, [r5, #0]
 8002638:	0606      	lsls	r6, r0, #24
 800263a:	f101 0304 	add.w	r3, r1, #4
 800263e:	d50a      	bpl.n	8002656 <_printf_i+0xce>
 8002640:	680e      	ldr	r6, [r1, #0]
 8002642:	602b      	str	r3, [r5, #0]
 8002644:	2e00      	cmp	r6, #0
 8002646:	da03      	bge.n	8002650 <_printf_i+0xc8>
 8002648:	232d      	movs	r3, #45	; 0x2d
 800264a:	4276      	negs	r6, r6
 800264c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002650:	230a      	movs	r3, #10
 8002652:	485e      	ldr	r0, [pc, #376]	; (80027cc <_printf_i+0x244>)
 8002654:	e019      	b.n	800268a <_printf_i+0x102>
 8002656:	680e      	ldr	r6, [r1, #0]
 8002658:	f010 0f40 	tst.w	r0, #64	; 0x40
 800265c:	602b      	str	r3, [r5, #0]
 800265e:	bf18      	it	ne
 8002660:	b236      	sxthne	r6, r6
 8002662:	e7ef      	b.n	8002644 <_printf_i+0xbc>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	6820      	ldr	r0, [r4, #0]
 8002668:	1d19      	adds	r1, r3, #4
 800266a:	6029      	str	r1, [r5, #0]
 800266c:	0601      	lsls	r1, r0, #24
 800266e:	d501      	bpl.n	8002674 <_printf_i+0xec>
 8002670:	681e      	ldr	r6, [r3, #0]
 8002672:	e002      	b.n	800267a <_printf_i+0xf2>
 8002674:	0646      	lsls	r6, r0, #25
 8002676:	d5fb      	bpl.n	8002670 <_printf_i+0xe8>
 8002678:	881e      	ldrh	r6, [r3, #0]
 800267a:	2f6f      	cmp	r7, #111	; 0x6f
 800267c:	bf0c      	ite	eq
 800267e:	2308      	moveq	r3, #8
 8002680:	230a      	movne	r3, #10
 8002682:	4852      	ldr	r0, [pc, #328]	; (80027cc <_printf_i+0x244>)
 8002684:	2100      	movs	r1, #0
 8002686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800268a:	6865      	ldr	r5, [r4, #4]
 800268c:	2d00      	cmp	r5, #0
 800268e:	bfa8      	it	ge
 8002690:	6821      	ldrge	r1, [r4, #0]
 8002692:	60a5      	str	r5, [r4, #8]
 8002694:	bfa4      	itt	ge
 8002696:	f021 0104 	bicge.w	r1, r1, #4
 800269a:	6021      	strge	r1, [r4, #0]
 800269c:	b90e      	cbnz	r6, 80026a2 <_printf_i+0x11a>
 800269e:	2d00      	cmp	r5, #0
 80026a0:	d04d      	beq.n	800273e <_printf_i+0x1b6>
 80026a2:	4615      	mov	r5, r2
 80026a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80026a8:	fb03 6711 	mls	r7, r3, r1, r6
 80026ac:	5dc7      	ldrb	r7, [r0, r7]
 80026ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80026b2:	4637      	mov	r7, r6
 80026b4:	42bb      	cmp	r3, r7
 80026b6:	460e      	mov	r6, r1
 80026b8:	d9f4      	bls.n	80026a4 <_printf_i+0x11c>
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d10b      	bne.n	80026d6 <_printf_i+0x14e>
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	07de      	lsls	r6, r3, #31
 80026c2:	d508      	bpl.n	80026d6 <_printf_i+0x14e>
 80026c4:	6923      	ldr	r3, [r4, #16]
 80026c6:	6861      	ldr	r1, [r4, #4]
 80026c8:	4299      	cmp	r1, r3
 80026ca:	bfde      	ittt	le
 80026cc:	2330      	movle	r3, #48	; 0x30
 80026ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026d6:	1b52      	subs	r2, r2, r5
 80026d8:	6122      	str	r2, [r4, #16]
 80026da:	464b      	mov	r3, r9
 80026dc:	4621      	mov	r1, r4
 80026de:	4640      	mov	r0, r8
 80026e0:	f8cd a000 	str.w	sl, [sp]
 80026e4:	aa03      	add	r2, sp, #12
 80026e6:	f7ff fedf 	bl	80024a8 <_printf_common>
 80026ea:	3001      	adds	r0, #1
 80026ec:	d14c      	bne.n	8002788 <_printf_i+0x200>
 80026ee:	f04f 30ff 	mov.w	r0, #4294967295
 80026f2:	b004      	add	sp, #16
 80026f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026f8:	4834      	ldr	r0, [pc, #208]	; (80027cc <_printf_i+0x244>)
 80026fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80026fe:	6829      	ldr	r1, [r5, #0]
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	f851 6b04 	ldr.w	r6, [r1], #4
 8002706:	6029      	str	r1, [r5, #0]
 8002708:	061d      	lsls	r5, r3, #24
 800270a:	d514      	bpl.n	8002736 <_printf_i+0x1ae>
 800270c:	07df      	lsls	r7, r3, #31
 800270e:	bf44      	itt	mi
 8002710:	f043 0320 	orrmi.w	r3, r3, #32
 8002714:	6023      	strmi	r3, [r4, #0]
 8002716:	b91e      	cbnz	r6, 8002720 <_printf_i+0x198>
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	f023 0320 	bic.w	r3, r3, #32
 800271e:	6023      	str	r3, [r4, #0]
 8002720:	2310      	movs	r3, #16
 8002722:	e7af      	b.n	8002684 <_printf_i+0xfc>
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	f043 0320 	orr.w	r3, r3, #32
 800272a:	6023      	str	r3, [r4, #0]
 800272c:	2378      	movs	r3, #120	; 0x78
 800272e:	4828      	ldr	r0, [pc, #160]	; (80027d0 <_printf_i+0x248>)
 8002730:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002734:	e7e3      	b.n	80026fe <_printf_i+0x176>
 8002736:	0659      	lsls	r1, r3, #25
 8002738:	bf48      	it	mi
 800273a:	b2b6      	uxthmi	r6, r6
 800273c:	e7e6      	b.n	800270c <_printf_i+0x184>
 800273e:	4615      	mov	r5, r2
 8002740:	e7bb      	b.n	80026ba <_printf_i+0x132>
 8002742:	682b      	ldr	r3, [r5, #0]
 8002744:	6826      	ldr	r6, [r4, #0]
 8002746:	1d18      	adds	r0, r3, #4
 8002748:	6961      	ldr	r1, [r4, #20]
 800274a:	6028      	str	r0, [r5, #0]
 800274c:	0635      	lsls	r5, r6, #24
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	d501      	bpl.n	8002756 <_printf_i+0x1ce>
 8002752:	6019      	str	r1, [r3, #0]
 8002754:	e002      	b.n	800275c <_printf_i+0x1d4>
 8002756:	0670      	lsls	r0, r6, #25
 8002758:	d5fb      	bpl.n	8002752 <_printf_i+0x1ca>
 800275a:	8019      	strh	r1, [r3, #0]
 800275c:	2300      	movs	r3, #0
 800275e:	4615      	mov	r5, r2
 8002760:	6123      	str	r3, [r4, #16]
 8002762:	e7ba      	b.n	80026da <_printf_i+0x152>
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	2100      	movs	r1, #0
 8002768:	1d1a      	adds	r2, r3, #4
 800276a:	602a      	str	r2, [r5, #0]
 800276c:	681d      	ldr	r5, [r3, #0]
 800276e:	6862      	ldr	r2, [r4, #4]
 8002770:	4628      	mov	r0, r5
 8002772:	f000 f82f 	bl	80027d4 <memchr>
 8002776:	b108      	cbz	r0, 800277c <_printf_i+0x1f4>
 8002778:	1b40      	subs	r0, r0, r5
 800277a:	6060      	str	r0, [r4, #4]
 800277c:	6863      	ldr	r3, [r4, #4]
 800277e:	6123      	str	r3, [r4, #16]
 8002780:	2300      	movs	r3, #0
 8002782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002786:	e7a8      	b.n	80026da <_printf_i+0x152>
 8002788:	462a      	mov	r2, r5
 800278a:	4649      	mov	r1, r9
 800278c:	4640      	mov	r0, r8
 800278e:	6923      	ldr	r3, [r4, #16]
 8002790:	47d0      	blx	sl
 8002792:	3001      	adds	r0, #1
 8002794:	d0ab      	beq.n	80026ee <_printf_i+0x166>
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	079b      	lsls	r3, r3, #30
 800279a:	d413      	bmi.n	80027c4 <_printf_i+0x23c>
 800279c:	68e0      	ldr	r0, [r4, #12]
 800279e:	9b03      	ldr	r3, [sp, #12]
 80027a0:	4298      	cmp	r0, r3
 80027a2:	bfb8      	it	lt
 80027a4:	4618      	movlt	r0, r3
 80027a6:	e7a4      	b.n	80026f2 <_printf_i+0x16a>
 80027a8:	2301      	movs	r3, #1
 80027aa:	4632      	mov	r2, r6
 80027ac:	4649      	mov	r1, r9
 80027ae:	4640      	mov	r0, r8
 80027b0:	47d0      	blx	sl
 80027b2:	3001      	adds	r0, #1
 80027b4:	d09b      	beq.n	80026ee <_printf_i+0x166>
 80027b6:	3501      	adds	r5, #1
 80027b8:	68e3      	ldr	r3, [r4, #12]
 80027ba:	9903      	ldr	r1, [sp, #12]
 80027bc:	1a5b      	subs	r3, r3, r1
 80027be:	42ab      	cmp	r3, r5
 80027c0:	dcf2      	bgt.n	80027a8 <_printf_i+0x220>
 80027c2:	e7eb      	b.n	800279c <_printf_i+0x214>
 80027c4:	2500      	movs	r5, #0
 80027c6:	f104 0619 	add.w	r6, r4, #25
 80027ca:	e7f5      	b.n	80027b8 <_printf_i+0x230>
 80027cc:	08002af9 	.word	0x08002af9
 80027d0:	08002b0a 	.word	0x08002b0a

080027d4 <memchr>:
 80027d4:	4603      	mov	r3, r0
 80027d6:	b510      	push	{r4, lr}
 80027d8:	b2c9      	uxtb	r1, r1
 80027da:	4402      	add	r2, r0
 80027dc:	4293      	cmp	r3, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	d101      	bne.n	80027e6 <memchr+0x12>
 80027e2:	2000      	movs	r0, #0
 80027e4:	e003      	b.n	80027ee <memchr+0x1a>
 80027e6:	7804      	ldrb	r4, [r0, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	428c      	cmp	r4, r1
 80027ec:	d1f6      	bne.n	80027dc <memchr+0x8>
 80027ee:	bd10      	pop	{r4, pc}

080027f0 <memcpy>:
 80027f0:	440a      	add	r2, r1
 80027f2:	4291      	cmp	r1, r2
 80027f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80027f8:	d100      	bne.n	80027fc <memcpy+0xc>
 80027fa:	4770      	bx	lr
 80027fc:	b510      	push	{r4, lr}
 80027fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002802:	4291      	cmp	r1, r2
 8002804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002808:	d1f9      	bne.n	80027fe <memcpy+0xe>
 800280a:	bd10      	pop	{r4, pc}

0800280c <memmove>:
 800280c:	4288      	cmp	r0, r1
 800280e:	b510      	push	{r4, lr}
 8002810:	eb01 0402 	add.w	r4, r1, r2
 8002814:	d902      	bls.n	800281c <memmove+0x10>
 8002816:	4284      	cmp	r4, r0
 8002818:	4623      	mov	r3, r4
 800281a:	d807      	bhi.n	800282c <memmove+0x20>
 800281c:	1e43      	subs	r3, r0, #1
 800281e:	42a1      	cmp	r1, r4
 8002820:	d008      	beq.n	8002834 <memmove+0x28>
 8002822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800282a:	e7f8      	b.n	800281e <memmove+0x12>
 800282c:	4601      	mov	r1, r0
 800282e:	4402      	add	r2, r0
 8002830:	428a      	cmp	r2, r1
 8002832:	d100      	bne.n	8002836 <memmove+0x2a>
 8002834:	bd10      	pop	{r4, pc}
 8002836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800283a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800283e:	e7f7      	b.n	8002830 <memmove+0x24>

08002840 <_free_r>:
 8002840:	b538      	push	{r3, r4, r5, lr}
 8002842:	4605      	mov	r5, r0
 8002844:	2900      	cmp	r1, #0
 8002846:	d040      	beq.n	80028ca <_free_r+0x8a>
 8002848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800284c:	1f0c      	subs	r4, r1, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	bfb8      	it	lt
 8002852:	18e4      	addlt	r4, r4, r3
 8002854:	f000 f910 	bl	8002a78 <__malloc_lock>
 8002858:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <_free_r+0x8c>)
 800285a:	6813      	ldr	r3, [r2, #0]
 800285c:	b933      	cbnz	r3, 800286c <_free_r+0x2c>
 800285e:	6063      	str	r3, [r4, #4]
 8002860:	6014      	str	r4, [r2, #0]
 8002862:	4628      	mov	r0, r5
 8002864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002868:	f000 b90c 	b.w	8002a84 <__malloc_unlock>
 800286c:	42a3      	cmp	r3, r4
 800286e:	d908      	bls.n	8002882 <_free_r+0x42>
 8002870:	6820      	ldr	r0, [r4, #0]
 8002872:	1821      	adds	r1, r4, r0
 8002874:	428b      	cmp	r3, r1
 8002876:	bf01      	itttt	eq
 8002878:	6819      	ldreq	r1, [r3, #0]
 800287a:	685b      	ldreq	r3, [r3, #4]
 800287c:	1809      	addeq	r1, r1, r0
 800287e:	6021      	streq	r1, [r4, #0]
 8002880:	e7ed      	b.n	800285e <_free_r+0x1e>
 8002882:	461a      	mov	r2, r3
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	b10b      	cbz	r3, 800288c <_free_r+0x4c>
 8002888:	42a3      	cmp	r3, r4
 800288a:	d9fa      	bls.n	8002882 <_free_r+0x42>
 800288c:	6811      	ldr	r1, [r2, #0]
 800288e:	1850      	adds	r0, r2, r1
 8002890:	42a0      	cmp	r0, r4
 8002892:	d10b      	bne.n	80028ac <_free_r+0x6c>
 8002894:	6820      	ldr	r0, [r4, #0]
 8002896:	4401      	add	r1, r0
 8002898:	1850      	adds	r0, r2, r1
 800289a:	4283      	cmp	r3, r0
 800289c:	6011      	str	r1, [r2, #0]
 800289e:	d1e0      	bne.n	8002862 <_free_r+0x22>
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4401      	add	r1, r0
 80028a6:	6011      	str	r1, [r2, #0]
 80028a8:	6053      	str	r3, [r2, #4]
 80028aa:	e7da      	b.n	8002862 <_free_r+0x22>
 80028ac:	d902      	bls.n	80028b4 <_free_r+0x74>
 80028ae:	230c      	movs	r3, #12
 80028b0:	602b      	str	r3, [r5, #0]
 80028b2:	e7d6      	b.n	8002862 <_free_r+0x22>
 80028b4:	6820      	ldr	r0, [r4, #0]
 80028b6:	1821      	adds	r1, r4, r0
 80028b8:	428b      	cmp	r3, r1
 80028ba:	bf01      	itttt	eq
 80028bc:	6819      	ldreq	r1, [r3, #0]
 80028be:	685b      	ldreq	r3, [r3, #4]
 80028c0:	1809      	addeq	r1, r1, r0
 80028c2:	6021      	streq	r1, [r4, #0]
 80028c4:	6063      	str	r3, [r4, #4]
 80028c6:	6054      	str	r4, [r2, #4]
 80028c8:	e7cb      	b.n	8002862 <_free_r+0x22>
 80028ca:	bd38      	pop	{r3, r4, r5, pc}
 80028cc:	200000e8 	.word	0x200000e8

080028d0 <sbrk_aligned>:
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	4e0e      	ldr	r6, [pc, #56]	; (800290c <sbrk_aligned+0x3c>)
 80028d4:	460c      	mov	r4, r1
 80028d6:	6831      	ldr	r1, [r6, #0]
 80028d8:	4605      	mov	r5, r0
 80028da:	b911      	cbnz	r1, 80028e2 <sbrk_aligned+0x12>
 80028dc:	f000 f8bc 	bl	8002a58 <_sbrk_r>
 80028e0:	6030      	str	r0, [r6, #0]
 80028e2:	4621      	mov	r1, r4
 80028e4:	4628      	mov	r0, r5
 80028e6:	f000 f8b7 	bl	8002a58 <_sbrk_r>
 80028ea:	1c43      	adds	r3, r0, #1
 80028ec:	d00a      	beq.n	8002904 <sbrk_aligned+0x34>
 80028ee:	1cc4      	adds	r4, r0, #3
 80028f0:	f024 0403 	bic.w	r4, r4, #3
 80028f4:	42a0      	cmp	r0, r4
 80028f6:	d007      	beq.n	8002908 <sbrk_aligned+0x38>
 80028f8:	1a21      	subs	r1, r4, r0
 80028fa:	4628      	mov	r0, r5
 80028fc:	f000 f8ac 	bl	8002a58 <_sbrk_r>
 8002900:	3001      	adds	r0, #1
 8002902:	d101      	bne.n	8002908 <sbrk_aligned+0x38>
 8002904:	f04f 34ff 	mov.w	r4, #4294967295
 8002908:	4620      	mov	r0, r4
 800290a:	bd70      	pop	{r4, r5, r6, pc}
 800290c:	200000ec 	.word	0x200000ec

08002910 <_malloc_r>:
 8002910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002914:	1ccd      	adds	r5, r1, #3
 8002916:	f025 0503 	bic.w	r5, r5, #3
 800291a:	3508      	adds	r5, #8
 800291c:	2d0c      	cmp	r5, #12
 800291e:	bf38      	it	cc
 8002920:	250c      	movcc	r5, #12
 8002922:	2d00      	cmp	r5, #0
 8002924:	4607      	mov	r7, r0
 8002926:	db01      	blt.n	800292c <_malloc_r+0x1c>
 8002928:	42a9      	cmp	r1, r5
 800292a:	d905      	bls.n	8002938 <_malloc_r+0x28>
 800292c:	230c      	movs	r3, #12
 800292e:	2600      	movs	r6, #0
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4630      	mov	r0, r6
 8002934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002938:	4e2e      	ldr	r6, [pc, #184]	; (80029f4 <_malloc_r+0xe4>)
 800293a:	f000 f89d 	bl	8002a78 <__malloc_lock>
 800293e:	6833      	ldr	r3, [r6, #0]
 8002940:	461c      	mov	r4, r3
 8002942:	bb34      	cbnz	r4, 8002992 <_malloc_r+0x82>
 8002944:	4629      	mov	r1, r5
 8002946:	4638      	mov	r0, r7
 8002948:	f7ff ffc2 	bl	80028d0 <sbrk_aligned>
 800294c:	1c43      	adds	r3, r0, #1
 800294e:	4604      	mov	r4, r0
 8002950:	d14d      	bne.n	80029ee <_malloc_r+0xde>
 8002952:	6834      	ldr	r4, [r6, #0]
 8002954:	4626      	mov	r6, r4
 8002956:	2e00      	cmp	r6, #0
 8002958:	d140      	bne.n	80029dc <_malloc_r+0xcc>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	4631      	mov	r1, r6
 800295e:	4638      	mov	r0, r7
 8002960:	eb04 0803 	add.w	r8, r4, r3
 8002964:	f000 f878 	bl	8002a58 <_sbrk_r>
 8002968:	4580      	cmp	r8, r0
 800296a:	d13a      	bne.n	80029e2 <_malloc_r+0xd2>
 800296c:	6821      	ldr	r1, [r4, #0]
 800296e:	3503      	adds	r5, #3
 8002970:	1a6d      	subs	r5, r5, r1
 8002972:	f025 0503 	bic.w	r5, r5, #3
 8002976:	3508      	adds	r5, #8
 8002978:	2d0c      	cmp	r5, #12
 800297a:	bf38      	it	cc
 800297c:	250c      	movcc	r5, #12
 800297e:	4638      	mov	r0, r7
 8002980:	4629      	mov	r1, r5
 8002982:	f7ff ffa5 	bl	80028d0 <sbrk_aligned>
 8002986:	3001      	adds	r0, #1
 8002988:	d02b      	beq.n	80029e2 <_malloc_r+0xd2>
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	442b      	add	r3, r5
 800298e:	6023      	str	r3, [r4, #0]
 8002990:	e00e      	b.n	80029b0 <_malloc_r+0xa0>
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	1b52      	subs	r2, r2, r5
 8002996:	d41e      	bmi.n	80029d6 <_malloc_r+0xc6>
 8002998:	2a0b      	cmp	r2, #11
 800299a:	d916      	bls.n	80029ca <_malloc_r+0xba>
 800299c:	1961      	adds	r1, r4, r5
 800299e:	42a3      	cmp	r3, r4
 80029a0:	6025      	str	r5, [r4, #0]
 80029a2:	bf18      	it	ne
 80029a4:	6059      	strne	r1, [r3, #4]
 80029a6:	6863      	ldr	r3, [r4, #4]
 80029a8:	bf08      	it	eq
 80029aa:	6031      	streq	r1, [r6, #0]
 80029ac:	5162      	str	r2, [r4, r5]
 80029ae:	604b      	str	r3, [r1, #4]
 80029b0:	4638      	mov	r0, r7
 80029b2:	f104 060b 	add.w	r6, r4, #11
 80029b6:	f000 f865 	bl	8002a84 <__malloc_unlock>
 80029ba:	f026 0607 	bic.w	r6, r6, #7
 80029be:	1d23      	adds	r3, r4, #4
 80029c0:	1af2      	subs	r2, r6, r3
 80029c2:	d0b6      	beq.n	8002932 <_malloc_r+0x22>
 80029c4:	1b9b      	subs	r3, r3, r6
 80029c6:	50a3      	str	r3, [r4, r2]
 80029c8:	e7b3      	b.n	8002932 <_malloc_r+0x22>
 80029ca:	6862      	ldr	r2, [r4, #4]
 80029cc:	42a3      	cmp	r3, r4
 80029ce:	bf0c      	ite	eq
 80029d0:	6032      	streq	r2, [r6, #0]
 80029d2:	605a      	strne	r2, [r3, #4]
 80029d4:	e7ec      	b.n	80029b0 <_malloc_r+0xa0>
 80029d6:	4623      	mov	r3, r4
 80029d8:	6864      	ldr	r4, [r4, #4]
 80029da:	e7b2      	b.n	8002942 <_malloc_r+0x32>
 80029dc:	4634      	mov	r4, r6
 80029de:	6876      	ldr	r6, [r6, #4]
 80029e0:	e7b9      	b.n	8002956 <_malloc_r+0x46>
 80029e2:	230c      	movs	r3, #12
 80029e4:	4638      	mov	r0, r7
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	f000 f84c 	bl	8002a84 <__malloc_unlock>
 80029ec:	e7a1      	b.n	8002932 <_malloc_r+0x22>
 80029ee:	6025      	str	r5, [r4, #0]
 80029f0:	e7de      	b.n	80029b0 <_malloc_r+0xa0>
 80029f2:	bf00      	nop
 80029f4:	200000e8 	.word	0x200000e8

080029f8 <_realloc_r>:
 80029f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029fc:	4680      	mov	r8, r0
 80029fe:	4614      	mov	r4, r2
 8002a00:	460e      	mov	r6, r1
 8002a02:	b921      	cbnz	r1, 8002a0e <_realloc_r+0x16>
 8002a04:	4611      	mov	r1, r2
 8002a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a0a:	f7ff bf81 	b.w	8002910 <_malloc_r>
 8002a0e:	b92a      	cbnz	r2, 8002a1c <_realloc_r+0x24>
 8002a10:	f7ff ff16 	bl	8002840 <_free_r>
 8002a14:	4625      	mov	r5, r4
 8002a16:	4628      	mov	r0, r5
 8002a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a1c:	f000 f838 	bl	8002a90 <_malloc_usable_size_r>
 8002a20:	4284      	cmp	r4, r0
 8002a22:	4607      	mov	r7, r0
 8002a24:	d802      	bhi.n	8002a2c <_realloc_r+0x34>
 8002a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a2a:	d812      	bhi.n	8002a52 <_realloc_r+0x5a>
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	4640      	mov	r0, r8
 8002a30:	f7ff ff6e 	bl	8002910 <_malloc_r>
 8002a34:	4605      	mov	r5, r0
 8002a36:	2800      	cmp	r0, #0
 8002a38:	d0ed      	beq.n	8002a16 <_realloc_r+0x1e>
 8002a3a:	42bc      	cmp	r4, r7
 8002a3c:	4622      	mov	r2, r4
 8002a3e:	4631      	mov	r1, r6
 8002a40:	bf28      	it	cs
 8002a42:	463a      	movcs	r2, r7
 8002a44:	f7ff fed4 	bl	80027f0 <memcpy>
 8002a48:	4631      	mov	r1, r6
 8002a4a:	4640      	mov	r0, r8
 8002a4c:	f7ff fef8 	bl	8002840 <_free_r>
 8002a50:	e7e1      	b.n	8002a16 <_realloc_r+0x1e>
 8002a52:	4635      	mov	r5, r6
 8002a54:	e7df      	b.n	8002a16 <_realloc_r+0x1e>
	...

08002a58 <_sbrk_r>:
 8002a58:	b538      	push	{r3, r4, r5, lr}
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	4d05      	ldr	r5, [pc, #20]	; (8002a74 <_sbrk_r+0x1c>)
 8002a5e:	4604      	mov	r4, r0
 8002a60:	4608      	mov	r0, r1
 8002a62:	602b      	str	r3, [r5, #0]
 8002a64:	f7fd fdaa 	bl	80005bc <_sbrk>
 8002a68:	1c43      	adds	r3, r0, #1
 8002a6a:	d102      	bne.n	8002a72 <_sbrk_r+0x1a>
 8002a6c:	682b      	ldr	r3, [r5, #0]
 8002a6e:	b103      	cbz	r3, 8002a72 <_sbrk_r+0x1a>
 8002a70:	6023      	str	r3, [r4, #0]
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
 8002a74:	200000f0 	.word	0x200000f0

08002a78 <__malloc_lock>:
 8002a78:	4801      	ldr	r0, [pc, #4]	; (8002a80 <__malloc_lock+0x8>)
 8002a7a:	f000 b811 	b.w	8002aa0 <__retarget_lock_acquire_recursive>
 8002a7e:	bf00      	nop
 8002a80:	200000f4 	.word	0x200000f4

08002a84 <__malloc_unlock>:
 8002a84:	4801      	ldr	r0, [pc, #4]	; (8002a8c <__malloc_unlock+0x8>)
 8002a86:	f000 b80c 	b.w	8002aa2 <__retarget_lock_release_recursive>
 8002a8a:	bf00      	nop
 8002a8c:	200000f4 	.word	0x200000f4

08002a90 <_malloc_usable_size_r>:
 8002a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a94:	1f18      	subs	r0, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bfbc      	itt	lt
 8002a9a:	580b      	ldrlt	r3, [r1, r0]
 8002a9c:	18c0      	addlt	r0, r0, r3
 8002a9e:	4770      	bx	lr

08002aa0 <__retarget_lock_acquire_recursive>:
 8002aa0:	4770      	bx	lr

08002aa2 <__retarget_lock_release_recursive>:
 8002aa2:	4770      	bx	lr

08002aa4 <_init>:
 8002aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa6:	bf00      	nop
 8002aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aaa:	bc08      	pop	{r3}
 8002aac:	469e      	mov	lr, r3
 8002aae:	4770      	bx	lr

08002ab0 <_fini>:
 8002ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab2:	bf00      	nop
 8002ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab6:	bc08      	pop	{r3}
 8002ab8:	469e      	mov	lr, r3
 8002aba:	4770      	bx	lr
